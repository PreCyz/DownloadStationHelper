import java.nio.file.Paths

group 'download-station-helper'
version '2.1.9'


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName = 'pg.Main'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.0'
    compile group: 'pl.project13.maven', name: 'git-commit-id-plugin', version: '2.2.4'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.2'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
}

def jarName = "DSHelper"
def jarNameFx = "DSHelper-FX"
def fxMainClassName = 'pg.FXMain'

def addScriptToRunFXFile = {
    def runImdbFile = Paths.get(buildDir.getAbsolutePath(), 'libs', 'runFX.sh').toFile()
    runImdbFile.append('echo \'Start program\'')
    runImdbFile.append('\necho \'.............\'')
    runImdbFile.append('\n\njava -jar ')
    runImdbFile.append(jarNameFx)
    runImdbFile.append('.jar')
    runImdbFile.append('\n\necho \'.............\'')
    runImdbFile.append('\necho \'Program ended\'')
    println("addScriptToRunFXFile $jarNameFx")
}

def copyApplicationProperties = copySpec {
    from 'src/main/resources/distro'
    include '*.properties','credentials'
}

task versionTxt()  {
    doLast {
        new File(Paths.get(buildDir.getAbsolutePath(), 'resources', 'main', 'version.txt').toString()).text = "$version"
    }
}

task copyAppPropertiesTask( type: Copy ) {
    into Paths.get(buildDir.getAbsolutePath(), 'libs', 'settings').toString()
    with copyApplicationProperties
}

//create a single Jar with all dependencies
task oneJar(type: Jar) {
    dependsOn copyAppPropertiesTask
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyToLib( type: Copy ) {
    into Paths.get(buildDir.getAbsolutePath(), 'libs', 'lib').toString()
    from configurations.runtime
}

//create a FX Jar
task fxJar(type: Jar) {
    dependsOn copyToLib, copyAppPropertiesTask, versionTxt
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': version,
                'Main-Class': fxMainClassName,
                'Class-path': configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
    doLast {
        addScriptToRunFXFile()
    }
    baseName = jarNameFx
    with jar
}

jar {
    dependsOn copyToLib, copyAppPropertiesTask
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': version,
                'Main-Class': mainClassName,
                'Class-path': configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
    baseName = jarName
}
