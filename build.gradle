import java.nio.file.Paths
//import org.gradle.internal.os.OperatingSystem

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

javafx {
    version = "17.0.11"
    modules = [ 'javafx.fxml','javafx.controls', 'javafx.media', 'javafx.web', 'javafx.swing' ]
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

def jacksonCore = "2.17.1"
def mockito = "5.12.0"
def jUnit5 = "5.10.2"
def assertJ = "3.25.3"

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonCore"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonCore"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonCore"
    implementation 'pl.project13.maven:git-commit-id-plugin:4.9.10'
    implementation "org.openjfx:javafx-base:$javafx.version"
    implementation "org.openjfx:javafx-controls:$javafx.version"
    implementation "org.openjfx:javafx-graphics:$javafx.version"
    implementation "org.openjfx:javafx-controls:$javafx.version"
    implementation "org.openjfx:javafx-fxml:$javafx.version"
    implementation 'com.google.guava:guava:33.2.0-jre'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnit5"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jUnit5"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockito"
    testImplementation "org.mockito:mockito-inline:5.2.0"
    testImplementation "org.assertj:assertj-core:$assertJ"
}

group 'download-station-helper'
def appVersion = "3.0.3"

def fxMainClassName = 'pg.Java11Main'
def jarName = "DSHelper-11+"
def buildDirPath = layout.buildDirectory.get().getAsFile().getAbsolutePath()

mainClassName = fxMainClassName

def copyApplicationProperties = copySpec {
    from 'src/main/resources/distro'
    include '*.properties','credentials'
}

tasks.register('copyToLib', Copy) {
    into Paths.get(buildDirPath, 'libs', 'lib').toString()
    from configurations
}

tasks.register('versionTxt') {
    doLast {
        new File(Paths.get(buildDirPath, 'resources', 'main', 'version.txt').toString()).text = "$appVersion"
    }
}

tasks.register('copyAppPropertiesTask', Copy) {
    into Paths.get(buildDirPath, 'libs', 'settings').toString()
    with copyApplicationProperties
}

jar {
    dependsOn copyToLib, copyAppPropertiesTask, versionTxt
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': appVersion,
                'Main-Class': mainClassName,
                'Class-path': configurations.runtimeClasspath.collect { 'lib/' + it.getName() }.join(' ')
    }
    archiveBaseName.set(jarName)
}

/*//create a single Jar with all dependencies
task oneJar(type: Jar) {
    dependsOn copyAppPropertiesTask
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': appVersion,
                'Main-Class': mainClassName
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}*/

/*
def jarNameFx = "DSHelper-FX11+"
def addScriptToRunFXFile = {
    String osName = OperatingSystem.current().getName();
    String osVersion = OperatingSystem.current().getVersion();
    println "*** $osName $osVersion was detected."
    String runFile = "runFX-$javafx.version"

    if (OperatingSystem.current().isLinux()) {
        runFile += '.sh';
    } else if (OperatingSystem.current().isUnix()) {
        // Consider UNIX.
    } else if (OperatingSystem.current().isWindows()) {
        runFile += '.bat';
    } else if (OperatingSystem.current().isMacOsX()) {
        // Consider OS X.
    } else {
        // Unknown OS.
    }

    def runImdbFile = Paths.get(buildDir.getAbsolutePath(), 'libs', runFile).toFile()
    //runImdbFile.append('echo \'Start program\'')
    //runImdbFile.append('\necho \'.............\'')
    runImdbFile.append('\n\n%J11%\\bin\\java ')
    runImdbFile.append('--module-path %JFX11% ')
    runImdbFile.append('--add-modules=javafx.fxml,javafx.controls,javafx.media,javafx.web,javafx.swing ')
    runImdbFile.append('--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED ')
    runImdbFile.append('--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED ')
    runImdbFile.append('-jar ')
    runImdbFile.append(jarNameFx)
    runImdbFile.append('.jar')
    //runImdbFile.append('\n\necho \'.............\'')
    //runImdbFile.append('\necho \'Program ended\'')
    println("addScriptToRunFXFile $jarNameFx")
}*/

/*//create a FX Jar
task fxJar(type: Jar) {
    dependsOn copyToLib, copyAppPropertiesTask, versionTxt
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': appVersion,
                'Main-Class': fxMainClassName,
                'Class-path': configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
    doLast {
        addScriptToRunFXFile()
    }
    archiveBaseName = jarNameFx
    with jar
}*/
