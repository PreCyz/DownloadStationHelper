import java.nio.file.Paths
//import org.gradle.internal.os.OperatingSystem

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "io.freefair.lombok" version "5.0.0-rc6"
}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.fxml','javafx.controls', 'javafx.media', 'javafx.web', 'javafx.swing' ]
}

repositories {
    mavenCentral()
    maven {
        url "http://nexus.gluonhq.com/nexus/content/repositories/releases/"
    }
}

dependencies {
    implementation 'org.apache.httpcomponents:httpclient:4.5.12'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.3'
    implementation 'pl.project13.maven:git-commit-id-plugin:2.2.6'
    implementation "org.openjfx:javafx-base:$javafx.version"
    implementation "org.openjfx:javafx-controls:$javafx.version"
    implementation "org.openjfx:javafx-graphics:$javafx.version"
    implementation "org.openjfx:javafx-controls:$javafx.version"
    implementation "org.openjfx:javafx-fxml:$javafx.version"
    implementation 'com.gluonhq:charm-glisten:6.0.3'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.15.0'
}

group 'download-station-helper'
def appVersion = "3.0.2"

def fxMainClassName = 'pg.Java11Main'
def jarName = "DSHelper-11+"

mainClassName = fxMainClassName

def copyApplicationProperties = copySpec {
    from 'src/main/resources/distro'
    include '*.properties','credentials'
}

task copyToLib( type: Copy ) {
    into Paths.get(buildDir.getAbsolutePath(), 'libs', 'lib').toString()
    from configurations.runtime
}

task versionTxt()  {
    doLast {
        new File(Paths.get(buildDir.getAbsolutePath(), 'resources', 'main', 'version.txt').toString()).text = "$appVersion"
    }
}

task copyAppPropertiesTask( type: Copy ) {
    into Paths.get(buildDir.getAbsolutePath(), 'libs', 'settings').toString()
    with copyApplicationProperties
}

jar {
    dependsOn copyToLib, copyAppPropertiesTask, versionTxt
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': appVersion,
                'Main-Class': mainClassName,
                'Class-path': configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
    archiveBaseName.set(jarName)
}

/*//create a single Jar with all dependencies
task oneJar(type: Jar) {
    dependsOn copyAppPropertiesTask
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': appVersion,
                'Main-Class': mainClassName
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}*/

/*
def jarNameFx = "DSHelper-FX11+"
def addScriptToRunFXFile = {
    String osName = OperatingSystem.current().getName();
    String osVersion = OperatingSystem.current().getVersion();
    println "*** $osName $osVersion was detected."
    String runFile = "runFX-$javafx.version"

    if (OperatingSystem.current().isLinux()) {
        runFile += '.sh';
    } else if (OperatingSystem.current().isUnix()) {
        // Consider UNIX.
    } else if (OperatingSystem.current().isWindows()) {
        runFile += '.bat';
    } else if (OperatingSystem.current().isMacOsX()) {
        // Consider OS X.
    } else {
        // Unknown OS.
    }

    def runImdbFile = Paths.get(buildDir.getAbsolutePath(), 'libs', runFile).toFile()
    //runImdbFile.append('echo \'Start program\'')
    //runImdbFile.append('\necho \'.............\'')
    runImdbFile.append('\n\n%J11%\\bin\\java ')
    runImdbFile.append('--module-path %JFX11% ')
    runImdbFile.append('--add-modules=javafx.fxml,javafx.controls,javafx.media,javafx.web,javafx.swing ')
    runImdbFile.append('--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED ')
    runImdbFile.append('--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED ')
    runImdbFile.append('-jar ')
    runImdbFile.append(jarNameFx)
    runImdbFile.append('.jar')
    //runImdbFile.append('\n\necho \'.............\'')
    //runImdbFile.append('\necho \'Program ended\'')
    println("addScriptToRunFXFile $jarNameFx")
}*/

/*//create a FX Jar
task fxJar(type: Jar) {
    dependsOn copyToLib, copyAppPropertiesTask, versionTxt
    manifest {
        attributes 'Implementation-Title': 'DownloadStationHelper',
                'Implementation-Version': appVersion,
                'Main-Class': fxMainClassName,
                'Class-path': configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
    doLast {
        addScriptToRunFXFile()
    }
    archiveBaseName = jarNameFx
    with jar
}*/
